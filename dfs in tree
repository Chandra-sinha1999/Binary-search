#include<iostream>
#include<queue>
using namespace std;
class node
{
public:
    int data;
    node* left;
    node* right;
};
node* root=NULL;
struct node* getnewnode(int data)
{
    struct node* temp=new node();
    temp->data=data;
    temp->right=NULL;
    temp->left=NULL;
    return temp;
}
struct node* insert(struct node* root,int data)
{
    if(root==NULL)
        {
            root=getnewnode(data);
        }
    else if(data<=root->data)
    {
        root->left=insert(root->left,data);
    }
    else
    {
        root->right=insert(root->right,data);
    }
    return root;
}
void preorder(node* root)
{
    if(root==NULL)
        return;
    cout<<root->data;
    preorder(root->left);
    preorder(root->right);
}
void inorder(node* root)
{
    if(root==NULL)
       return;
    inorder(root->left);
    cout<<root->data;
    inorder(root->right);
}
void postorder(node* root)
{
    if(root==NULL)
       return;
    postorder(root->left);
    postorder(root->right);
    cout<<root->data;
}
int isbinary(node* root,int minvalue,int maxvalue)
{
    if(root==NULL)
        return 1;
    if(root->data>minvalue&&root->data<maxvalue&&isbinary(root->left,minvalue,root->data)&&isbinary(root->right,root->data,maxvalue))
        return 1;
    else
        return 0;

}
int isbinarytree(node* root)
{
    int minvalue=-1234;
    int maxvalue=1234;
    cout<<isbinary(root,minvalue,maxvalue);
}
node* findmean(node* root)
{
    while(root->left != NULL) root = root->left;
	return root;

}
node* deletea(node* root,int data)
{
    if(root==NULL)
        return root;
    else if(root->data>data)
        deletea(root->left,data);
    else if(root->data<data)
        deletea(root->right,data);
    else
    {
        if(root->left==NULL&&root->right==NULL)
            {
                delete root;
                root=NULL;
                return root;
            }
        else if(root->left==NULL)
        {
            root->data=(root->right)->data;
            root=root->right;
            delete root;
            root=NULL;
            return root;
        }
        else if(root->right==NULL)
        {
            root->data=(root->left)->data;
            root=root->left;
            delete root;
            root=NULL;
            return root;
        }
        else
        {
            node* temp=findmean(root->right);
            root->data=temp->data;
            root->right=deletea(root->right,temp->data);
            return root;
        }
    }
}
int main(void)
{
    root=insert(root,5);
    root=insert(root,8);
    root=insert(root,4);
    root=insert(root,2);
    root=insert(root,3);
    root=insert(root,6);
    //root=insert(root,8);
    root=insert(root,7);
    root=insert(root,1);
    preorder(root);
    cout<<endl;
    inorder(root);
    cout<<endl;
    postorder(root);
    cout<<endl;
    isbinarytree(root);
    cout<<endl;
    deletea(root,3);
    inorder(root);
    cout<<endl;
    isbinarytree(root);
}
